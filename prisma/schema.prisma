// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  avatar    String?
  programs  Program[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Program {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  title       String    @unique
  description String?
  hashtags    Hashtag[]
  // templates   Template[]
  // likes       Like[]
  isPrivate   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Hashtag {
  id        Int       @id @default(autoincrement())
  hashtag   String    @unique
  programs  Program[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// model Template {
//   id        Int        @id @default(autoincrement())
//   exercises Exercise[]
//   hashtags  Hashtag[]
//   Program   Program?   @relation(fields: [programId], references: [id])
//   programId Int?
// }

// model Exercise {
//   id         Int       @id @default(autoincrement())
//   author     User      @relation(fields: [authorId], references: [id])
//   authorId   Int
//   exercise   String    @unique
//   sets       Set[]
//   // break  Int
//   Template   Template? @relation(fields: [templateId], references: [id])
//   templateId Int?
// }

// model Set {
//   id         Int       @id @default(autoincrement())
//   weight     Int
//   rir        Int
//   rep        Int
//   Exercise   Exercise? @relation(fields: [exerciseId], references: [id])
//   exerciseId Int?
// }

// model Like {
//   id        Int      @id @default(autoincrement())
//   program   Program  @relation(fields: [programId], references: [id])
//   user      User     @relation(fields: [userId], references: [id])
//   programId Int
//   userId    Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([programId, userId])
// }
