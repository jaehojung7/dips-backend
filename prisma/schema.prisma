// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator prisma {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  email     String     @unique
  password  String
  avatar    String?
  programs  Program[]
  exercises Exercise[]
  records   Record[]
  likes     Like[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Program {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  title       String    @unique
  description String?
  hashtags    Hashtag[]
  likes       Like[]
  workouts    Workout[]
  isPrivate   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Hashtag {
  id        Int       @id @default(autoincrement())
  hashtag   String    @unique
  programs  Program[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  program   Program  @relation(fields: [programId], references: [id])
  programId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([programId, userId])
}

model Workout {
  id           Int          @id @default(autoincrement())
  program      Program      @relation(fields: [programId], references: [id])
  programId    Int
  workoutIndex Int
  title        String
  workoutSets  WorkoutSet[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model WorkoutSet {
  id        Int      @id @default(autoincrement())
  workout   Workout  @relation(fields: [workoutId], references: [id])
  workoutId Int
  exercise  String
  setCount  Int
  repCount  Int?
  // break      Int[]
  // rir        Int?
  // minReps    Int?
  // maxReps    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exercise {
  id        Int      @id @default(autoincrement())
  users     User[]
  exercise  String   @unique
  bodyPart  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Record {
  id               Int              @id @default(autoincrement())
  user             User             @relation(fields: [userId], references: [id])
  userId           Int
  title            String
  description      String?
  baseProgramId    Int?
  baseWorkoutIndex Int?
  recordExercises  RecordExercise[]
  // isPrivate   Boolean   @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model RecordExercise {
  id                  Int                 @id @default(autoincrement())
  record              Record              @relation(fields: [recordId], references: [id])
  recordId            Int
  recordExerciseIndex Int
  exercise            String
  recordExerciseSets  RecordExerciseSet[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model RecordExerciseSet {
  id               Int            @id @default(autoincrement())
  recordExercise   RecordExercise @relation(fields: [recordExerciseId], references: [id])
  recordExerciseId Int
  weight           Int
  repCount         Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}
